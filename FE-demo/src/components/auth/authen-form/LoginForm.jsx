import React from "react";
import { Button, Checkbox, Form, Input } from "antd";
// import "./LoginForm.css";
import styles from "./authenForm.module.css"; // Thay ƒë·ªïi import
import { Await, Link, useNavigate, useLocation } from "react-router-dom";
import FormItem from "antd/es/form/FormItem";
import { FaFacebookSquare, FaGoogle } from "react-icons/fa";
import { FaGithub } from "react-icons/fa6";
import { BsFillPersonFill } from "react-icons/bs";
import { FaLock } from "react-icons/fa";
import { BiUnderline } from "react-icons/bi";
import { UserAddOutlined } from "@ant-design/icons";
import { toast } from "react-toastify";

import { useUser } from "/src/userContext/UserContext";
import { login } from "../../../services/authService";

// import { useUser } from "../../../userContext/userContext";

function LoginForm() {
  const navigate = useNavigate(); // d√πng ƒë·ªÉ chuy·ªÉn h∆∞·ªõng trang
  const { setUser } = useUser(); // setUser l√† m·ªôt ƒë·ªÉ c·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng, l·∫•y h√†m setUser t·ª´ object m√† useUser() tr·∫£ v·ªÅ
  const location = useLocation();

  /* H√†m x·ª≠ l√Ω khi nh·∫•n n√∫t Google */
  const hangdleGoogleLogin = () => {
    /* http://localhost:8080/oauth2/authorization/google */
    window.location.href = "http://localhost:8080/oauth2/authorization/google";
  };
  /* onFinish ƒë∆∞·ª£c g·ªçi khi ng∆∞·ªùi d√πng nh·∫•n n√∫t Login */
  const onFinish = async (values) => {
    try {
      const submitData = {
        // Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu ƒë·ªëi t∆∞·ª£ng Javascript(username/email + password) th√†nh JSON ƒë·ªÉ g·ª≠i l√™n server
        usernameOrEmail: values.usernameOrEmail,
        password: values.password,
      };
      // g·ªçi t·ªõi api t·ª´ AuthService
      const response = await login(submitData);
      console.log("response:", response);

      const result = response.data;
      console.log("result:", result);

      //Ki·ªÉm tra xem ph·∫£n h·ªìi HTTP c√≥ th√†nh c√¥ng kh√¥ng (status code t·ª´ 200‚Äì299) v√† c√≥ token ƒë∆∞·ª£c tr·∫£ v·ªÅ hay kh√¥ng
      if (response.status === 200 && result.accessToken) {
        // G·ªôp th√¥ng tin user v√† th√¥ng tin g√≥i th√†nh vi√™n v√†o m·ªôt object
        const userData = {
          ...result.user, // L·∫•y t·∫•t c·∫£ c√°c tr∆∞·ªùng t·ª´ object user
          membership: result.currentUserMembership, // Th√™m tr∆∞·ªùng membership
          quitplan: result.currentQuitPlan, // Th√™m tr∆∞·ªùng quitPlan
        };
        // L∆∞u token v√†o localStorage ƒë·ªÉ s·ª≠ d·ª•ng sau n√†y
        localStorage.setItem("accessToken", result.accessToken);
        localStorage.setItem("tokenType", result.tokenType); // "Bearer" ho·∫∑c "JWT", tu·ª≥ backend
        // L∆∞u user info th√†nh 1 object JSON v√†o localStorage
        localStorage.setItem("user", JSON.stringify(userData));
        // l∆∞u th√¥ng tin user v√†o context
        setUser(userData);

        localStorage.setItem("username", result.user.username); // ho·∫∑c email, tu·ª≥ backend
        localStorage.setItem("email", result.user.email); //
        // "Login Successfully ^3^"
        toast.success("Login Successfully ^3^", {
          position: "top-right", // ho·∫∑c "top-center", "bottom-left",...
          autoClose: 6000, // th·ªùi gian t·ª± ƒë·ªông ƒë√≥ng (ms)
          hideProgressBar: false, // ·∫©n/hi·ªán progress bar
          closeOnClick: true, // click ƒë·ªÉ ƒë√≥ng th√¥ng b√°o
          pauseOnHover: true,
          draggable: true, // c√≥ th·ªÉ k√©o th√¥ng b√°o ƒë·ªÉ ƒë√≥ng
          progress: undefined,
          theme: "dark", // ho·∫∑c "dark", "colored"
          toastClassName: "success-toast",
        });

        // --- LOGIC CHUY·ªÇN H∆Ø·ªöNG M·ªöI D·ª∞A TR√äN D·ªÆ LI·ªÜU T·ª®C TH√å ---
        // L·∫•y vai tr√≤ tr·ª±c ti·∫øp t·ª´ `result.user` v·ª´a nh·∫≠n ƒë∆∞·ª£c
        const userRole = result.user.role;

        // 1. check n·∫øu tr·∫°ng tr√°i 'from' t·ªìn t·∫°i ·ªü redirect.
        // 2. n·∫øu n√≥ t·ªìn t·∫°i, d√πng ƒë∆∞·ªùng(path) ƒë√≥.
        // 3. n·∫øu ko, d√πng default '/dashboard'.
        let defaultRedirectPath = "/home"; // Trang m·∫∑c ƒë·ªãnh n·∫øu role kh√¥ng x√°c ƒë·ªãnh

        console.log("Login successful, redirecting to:", defaultRedirectPath);

        // 1. X√°c ƒë·ªãnh trang dashboard m·∫∑c ƒë·ªãnh d·ª±a tr√™n role c·ªßa ng∆∞·ªùi d√πng
        if (userRole === "MEMBER") {
          defaultRedirectPath = "/dashboard";
        } else if (userRole === "COACH") {
          defaultRedirectPath = "/coach-dashboard";
        } else if (userRole === "ADMIN") {
          defaultRedirectPath = "/admin"; // V√≠ d·ª• cho admin
        }

        // 2. L·∫•y trang ƒë√≠ch m√† ng∆∞·ªùi d√πng ƒëang c·ªë g·∫Øng truy c·∫≠p (n·∫øu c√≥)
        const from = location.state?.from?.pathname;

        // 3. Quy·∫øt ƒë·ªãnh trang cu·ªëi c√πng s·∫Ω chuy·ªÉn h∆∞·ªõng ƒë·∫øn
        //    ∆Øu ti√™n trang `from` n·∫øu n√≥ t·ªìn t·∫°i, n·∫øu kh√¥ng th√¨ d√πng trang m·∫∑c ƒë·ªãnh theo role.
        const destination = from || defaultRedirectPath;

        console.log(
          `Login successful. Role: ${userRole}. Redirecting to: ${destination}`
        );

        // 4. Th·ª±c hi·ªán chuy·ªÉn h∆∞·ªõng
        navigate(destination, { replace: true });
      } else {
        // ƒêƒÉng nh·∫≠p sai th√¥ng tin
        console.warn("Login failed:", result.message);
        toast.error(result.message, { theme: "dark", position: "top-left" });
        // ho·∫∑c toast.error("Sai th√¥ng tin ƒëƒÉng nh·∫≠p", vui l√≤ng th·ª≠ l·∫°i!");
      }
    } catch (error) {
      console.error("Error Info: ", error);
      if (error.status === 404 && error.response) {
        console.warn("Login failed:", error.response);
        toast.error(error.response.data, {
          theme: "dark",
          position: "top-left",
        });
        console.log(error.response.data);
      } else if (
        /* TypeError - x·∫£y ra khi g·ªçi fetch() m√† kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c t·ªõi server - BackEnd ch∆∞a ƒëc ch·∫°y */
        error instanceof TypeError &&
        error.message === "Failed to fetch"
      ) {
        toast.warning(
          "L·ªói Server ch∆∞a ƒë∆∞·ª£c kh·ªüi ƒë·ªông, th·ª≠ l·∫°i sau khi ƒë√£ ch·∫°y h·ªá th·ªëng Back-End nhen üòè ",
          { theme: "dark", position: "top-left" }
        );
      } else {
        /* N·∫øu kphai l·ªói do ch∆∞a kh·ªüi ƒë·ªông Back-End */
        toast.error(
          "ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh ƒëƒÉng nh·∫≠p, vui l√≤ng th·ª≠ l·∫°i sau!",
          { theme: "dark", position: "top-left" }
        );
      }
    }
  };

  const onFinishFailed = (errorInfo) => {
    console.log("Failed:", errorInfo);
  };
  return (
    <div className={styles.authContainer}>
      <div className={styles.authFormCard}>
        <div className={styles.logoContainer}>
          <Link to="/home">
            <img
              src="/images/Image2.png"
              alt="App Logo"
              className={styles.authLogo}
            />
          </Link>
        </div>
        <h1 className={styles.authFormTitle}>Welcome back!</h1>

        <Form
          name="login"
          layout="vertical"
          initialValues={{ remember: true }}
          onFinish={onFinish}
          onFinishFailed={onFinishFailed}
          autoComplete="on"
        >
          <Form.Item
            label="Email"
            name="usernameOrEmail"
            rules={[
              {
                required: true,
                message: "Please input your email or username!",
              },
            ]}
          >
            <Input placeholder="Enter your email" />
          </Form.Item>

          <Form.Item
            label="Password"
            name="password"
            rules={[{ required: true, message: "Please input your password!" }]}
          >
            <Input.Password placeholder="Enter your password" />
          </Form.Item>

          {/* === PH·∫¶N ƒê∆Ø·ª¢C TH√äM L·∫†I === */}
          <Form.Item>
            <div
              style={{
                display: "flex",
                justifyContent: "space-between",
                alignItems: "center",
              }}
            >
              <Form.Item name="remember" valuePropName="checked" noStyle>
                <Checkbox>Remember me</Checkbox>
              </Form.Item>
              <Link
                to="/forgot"
                className={styles.authLink}
                style={{ marginTop: 0 }}
              >
                Forgot password?
              </Link>
            </div>
          </Form.Item>
          {/* =========================== */}

          <Form.Item>
            <Button
              type="primary"
              htmlType="submit"
              className={styles.authSubmitButton}
            >
              Sign In
            </Button>
          </Form.Item>

          {/* === PH·∫¶N ƒêƒÇNG NH·∫¨P SOCIAL === */}
          <div className={styles.altLogin}>
            <p className={styles.altLoginTitle}>Or Login With</p>
            <div className={styles.altLoginButtons}>
              <Button
                icon={<FaGoogle />}
                className="google-btn"
                onClick={hangdleGoogleLogin}
              >
                Google
              </Button>
            </div>
          </div>
          {/* =========================================== */}

          <div className={styles.authSwitchLink}>
            <span>Don't have an account?</span>
            <Link to="/register">Sign up</Link>
          </div>
        </Form>
      </div>
    </div>
  );
}

export default LoginForm;
